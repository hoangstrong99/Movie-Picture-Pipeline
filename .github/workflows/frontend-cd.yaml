name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'

env:
  NODE_VERSION: "18.x"

jobs:
  lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          # Adjust if you use yarn or have a different lock file
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint -- --fix

  test:
    name: Frontend Testing
    runs-on: ubuntu-latest
    needs: [lint]    # optional: ensure lint job passes before running tests
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build:
    name: Build and Push Docker image to Amazon ECR
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, Tag, and Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          # Update kubeconfig if you need to fetch the backend IP
          aws eks update-kubeconfig --name cluster

          # Retrieve external IP from the "backend" service's load balancer
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo "Backend external IP: $EXTERNALIP"

          # Build and tag Docker image
          docker build \
            -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
            --build-arg REACT_APP_MOVIE_API_URL=http://$EXTERNALIP \
            .

          # List Docker images (debug/logging)
          docker images

          # Push the image to ECR
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-frontend
          restore-keys: |
            docker-${{ github.sha }}-

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster

      - name: Run init.sh
        working-directory: ./setup
        run: ./init.sh || true

      - name: Set Docker image in Kustomize
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        working-directory: ./frontend/k8s
        run: kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Apply Kubernetes resources
        working-directory: ./frontend/k8s
        run: kustomize build | kubectl apply -f -