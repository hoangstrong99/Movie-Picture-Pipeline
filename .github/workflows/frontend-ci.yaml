name: Frontend Continuous Integration

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - "frontend/**"

env:
  NODE_VERSION: "18.x"

jobs:
  lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint -- --fix

  test:
    name: Frontend Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test

  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build, Tag, and Push Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          # Update kubeconfig if you need the cluster IP (EXTERNALIP) for the build arg
          aws eks update-kubeconfig --name cluster

          # Retrieve EXTERNALIP from the "backend" service's LoadBalancer
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo "External IP: $EXTERNALIP"

          # Build the image, passing in the dynamic API URL
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
            --build-arg REACT_APP_MOVIE_API_URL=http://$EXTERNALIP \
            .

          # (Optional) View Docker images
          docker images

          # (Optional) Push if you want the image stored in ECR
          # docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-frontend